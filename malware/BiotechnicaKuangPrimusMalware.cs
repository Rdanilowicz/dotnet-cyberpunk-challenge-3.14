using dotnet_cyberpunk_challenge_3_14.malware.lib;
using dotnet_cyberpunk_challenge_3_14.malware.lib._lib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace dotnet_cyberpunk_challenge_3_14.malware
{
    internal class BiotechnicaKuangPrimusMalware : MultiKuangDaemonFamilyBase<BiotechnicaMessageRoot, BiotechnicaProcessList>
    {
        public async override Task Initialize()
        {
            await GetCurrentConnection();
        }

        public async override Task<string> GetIceTypeOnRemote()
        {
            BiotechnicaMessageRoot biotechnicaMessageResponse = await CurrentServerConnection.SendRequest("model-type");
            string modelType = biotechnicaMessageResponse.system.model;

            string matchedModel = "";
            if (_IsTargetHatichiICE(modelType))
            {
                matchedModel = "hatachi";
            }
            else if (_IsTargetHosakaICE(modelType))
            {
                matchedModel = "hosaka";
            }
            else if (_IsTargetKiroshiICE(modelType))
            {
                matchedModel = "kiroshi";
            }
            else
            {
                matchedModel = "unknown";
            }

            return matchedModel;
        }

        protected async override Task<List<BiotechnicaProcessList>> _GetProcessList()
        {
            BiotechnicaMessageRoot message = await CurrentServerConnection.SendRequest("process-list");
            List<BiotechnicaProcessList> processList = message.system.processList;
            return processList;
        }


        public async override void IceBreak()
        {
            throw new NotImplementedException();
        }


        // FIXME: DON'T CHANGE - This is still under development
        public async override Task SetupIceBreakerTunnelToTarget()
        {
            // CurrentIceBreakerTunnelConnection  = new CurrentIceBreakerTunnelConnection();
            // await CurrentIceBreakerTunnelConnection .Initialize();
        }

        public async override Task<IEnumerable<string>> GetProcessMemoryMapping()
        {
            List<BiotechnicaProcessList> BiotechnicaMessageProcessLists = await GetProcessList();
            return BiotechnicaMessageProcessLists.Select(pl => pl.memoryStartingAddress);
        }
    }
}
