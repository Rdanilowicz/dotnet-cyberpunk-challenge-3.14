using dotnet_cyberpunk_challenge_3.malware.lib._lib;
using dotnet_cyberpunk_challenge_3.malware.lib._lib.interfaces;

namespace dotnet_cyberpunk_challenge_3.malware.lib
{

    // S => derived MessageRoot
    // T => ServerConnection
    // Y => 
    public abstract class MultiKuangDaemonFamilyBase<T, Z> 
        where T : MessageRoot
        where Z : ProcessList
    {
        protected bool IsConnectionTunnelProtected {get;set;}
        protected bool IsConnectionProxyEnabled {get;set;}
        public ServerConnection<T> CurrentServerConnection {get;set;}
        public IceBreakerTunnelConnection<T> CurrentIceBreakerTunnelConnection {get;set;}



        public abstract Task SetupIceBreakerTunnelToTarget(); // Setup the connection tunnel between host and target

        public abstract Task<string> GetIceTypeOnRemote(); // Students need to Get type of ICE on target

        public abstract void IceBreak(); // Students need to Attempt to Break the ICE

        public abstract Task Initialize();
        
        protected abstract Task<List<Z>> _GetProcessList();

        // FIXME: Mentor note - This would be cool spot to teach them about why protected abstraction is useful
        public async Task<List<Z>> GetProcessList() {
            return await _GetProcessList();
        }

        public abstract Task<IEnumerable<string>> GetProcessMemoryMapping(); 



        public async virtual Task<ServerConnection<T>> GetCurrentConnection() {
            try {
                if (CurrentServerConnection != null) {
                    return CurrentServerConnection;
                } else {
                    throw new Exception("Not Currently connected to an Arasaka Server! Hope your synapses aren't burnt out.");
                }
            } catch {
                CurrentServerConnection = _EstablishConnectionToTargetServer();
                await CurrentServerConnection.Initialize();
                return CurrentServerConnection;
            }
        }

        protected virtual bool _IsTargetHatichiICE(string retrievedModelType){
            return KnownIceTypes.HITACHI == retrievedModelType;
        }

        protected virtual bool _IsTargetHosakaICE(string retrievedModelType){
            return KnownIceTypes.HOSAKA == retrievedModelType;
        }

        protected virtual bool _IsTargetKiroshiICE(string retrievedModelType){
            return KnownIceTypes.KIROSHI == retrievedModelType;
        }

        protected virtual ServerConnection<T> _EstablishConnectionToTargetServer() {
            // return new ArasakaServerConnection();
            return new ServerConnection<T>();
        }


        // FIXME: This needs genericized. Suspect it needs to use concrete classes (which requires
        // refactoring class hierarchy
        protected async virtual Task<IceBreakerTunnelConnection<T>> _EncryptConnection(IceBreakerTunnelConnection<T> tunnel) {
            await tunnel.Initialize();
            IsConnectionTunnelProtected = tunnel.IsEncrypted == true && tunnel.TunnelEncryption == EncryptionType.SSL;
            IsConnectionProxyEnabled = tunnel.IsEncrypted;
            return tunnel;
        }
    }
}