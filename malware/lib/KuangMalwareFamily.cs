using dotnet_cyberpunk_challenge_3.malware.lib._lib;

namespace dotnet_cyberpunk_challenge_3.malware.lib
{
    

    public abstract class KuangDaemonFamilyBase<T> where T : new()
    {
        protected bool IsConnectionTunnelProtected {get;set;}
        protected bool IsConnectionProxyEnabled {get;set;}
        // public ArasakaServerConnection CurrentArasakaServerConnection {get;set;}
        public T CurrentServerConnection {get;set;}
        // public MilitechServerConnection CurrentMilitechServerConnection {get;set;}
        public IceBreakerArasakaTunnelConnection CurrentIceBreakerArasakaTunnelConnection {get;set;}
        public IceBreakerMilitechTunnelConnection CurrentIceBreakerMilitechTunnelConnection {get;set;}



        public abstract Task SetupIceBreakerTunnelToTarget(); // Setup the connection tunnel between host and target

        public abstract Task<string> GetIceTypeOnRemote(); // Students need to Get type of ICE on target

        public abstract void IceBreak(); // Students need to Attempt to Break the ICE

        public abstract Task Initialize();

        public virtual Task<List<ArasakaMessageProcessList>> GetArasakaProcessList() {
            throw new NotImplementedException();
        }

        public virtual Task<List<MilitechICEProcessList>> GetMilitechProcessList() {
            throw new NotImplementedException();
        }

        public abstract Task<IEnumerable<string>> GetProcessMemoryMapping(); 



        public async virtual Task<T> GetCurrentArasakaConnection() {
            try {
                if (CurrentServerConnection != null) {
                    return CurrentServerConnection;
                } else {
                    throw new Exception("Not Currently connected to an Arasaka Server! Hope your synapses aren't burnt out.");
                }
            } catch {
                CurrentServerConnection = _EstablishConnectionToTargetServer();
                await (CurrentServerConnection as ArasakaServerConnection).Initialize();
                return CurrentServerConnection;
            }
        }

        public async virtual Task<T> GetCurrentMilitechConnection() {
            try {
                if (CurrentServerConnection != null) {
                    return CurrentServerConnection;
                } else {
                    throw new Exception("Not Currently connected to an Arasaka Server! Hope your synapses aren't burnt out.");
                }
            } catch {
                CurrentServerConnection = _EstablishConnectionToTargetServer();
                await (CurrentServerConnection  as MilitechServerConnection).Initialize();
                return CurrentServerConnection;
            }
        }



        protected virtual bool _IsTargetHatichiICE(string retrievedModelType){
            return KnownIceTypes.HITACHI == retrievedModelType;
        }

        protected virtual bool _IsTargetHosakaICE(string retrievedModelType){
            return KnownIceTypes.HOSAKA == retrievedModelType;
        }

        protected virtual bool _IsTargetKiroshiICE(string retrievedModelType){
            return KnownIceTypes.KIROSHI == retrievedModelType;
        }

        // protected virtual T _EstablishConnectionToArasakaTargetServer() {
        //     return new T();
        // }

        // protected virtual T _EstablishConnectionToMilitechTargetServer() {
        //     return new T();
        // }

        protected virtual T _EstablishConnectionToTargetServer() {
            return new T();
        }

        protected async virtual Task<IceBreakerArasakaTunnelConnection> _EncryptArasakaConnection() {
            IceBreakerArasakaTunnelConnection tunnel = new IceBreakerArasakaTunnelConnection();
            await tunnel.Initialize();
            IsConnectionTunnelProtected = tunnel.IsEncrypted == true && tunnel.TunnelEncryption == EncryptionType.SSL;
            IsConnectionProxyEnabled = tunnel.IsEncrypted;
            return tunnel;
        }

        protected async virtual Task<IceBreakerMilitechTunnelConnection> _EncryptMilitechConnection() {
            IceBreakerMilitechTunnelConnection tunnel = new IceBreakerMilitechTunnelConnection();
            await tunnel.Initialize();
            IsConnectionTunnelProtected = tunnel.IsEncrypted == true && tunnel.TunnelEncryption == EncryptionType.SSL;
            IsConnectionProxyEnabled = tunnel.IsEncrypted;
            return tunnel;
        }
    }
}