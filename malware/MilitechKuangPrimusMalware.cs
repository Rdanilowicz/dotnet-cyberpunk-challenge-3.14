using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using dotnet_cyberpunk_challenge_3.malware.lib;
using dotnet_cyberpunk_challenge_3.malware.lib._lib;

namespace dotnet_cyberpunk_challenge_3.malware
{
    // TODO: Challenge2 - Tasks
    //  - FIRST, You'll need to go to `MultiKuangMalwareFamily.cs` and do the tasks listed there, then come back
    //  - Okay if you already finished the `MultiKuangMalwareFamily.cs` then you're good to continue!
    //  - Swap the base class to use MultiKuangDaemonFamilyBase
    //  - Pass in the generic types that we need to the base class. Remember that you're working
    //  with Militech here.
    public class MilitechKuangPrimusMalware : KuangDaemonFamilyBase<MilitechServerConnection>
    {
        public async override Task Initialize()
        {
            // TODO: Challenge1 - Use F12 to go to this method's defintion
            await GetCurrentMilitechConnection();
        }

        public async override Task<string> GetIceTypeOnRemote()
        {
            MilitechMessageRoot militechMessageResponse = await CurrentServerConnection.SendRequest("model-type");
            string modelType = militechMessageResponse.connection.model;

            string matchedModel = "";
            if (_IsTargetHatichiICE(modelType)){
                matchedModel = "hatachi";
            } else if (_IsTargetHosakaICE(modelType)) {
                matchedModel ="hosaka";
            } else if (_IsTargetKiroshiICE(modelType)) {
                matchedModel = "kiroshi";
            } else {
                matchedModel = "unknown";
            }

            return matchedModel; 
        }

        public async override Task<List<MilitechICEProcessList>> GetMilitechProcessList()
        {
            MilitechMessageRoot message = await CurrentServerConnection.SendRequest("process-list");
            List<MilitechICEProcessList> processList = message.connection.processList;
            return processList;
        }

        public async override void IceBreak()
        {
            throw new NotImplementedException();
        }

        public async override Task SetupIceBreakerTunnelToTarget()
        {
            CurrentIceBreakerMilitechTunnelConnection = new IceBreakerMilitechTunnelConnection();
            await CurrentIceBreakerMilitechTunnelConnection.Initialize();
        }


        public async override Task<IEnumerable<string>> GetProcessMemoryMapping()
        {
            List<MilitechICEProcessList> militechMessageProcessLists = await GetMilitechProcessList();
            return militechMessageProcessLists.Select(pl => pl.memoryStartingAddress);
        }
    }
}