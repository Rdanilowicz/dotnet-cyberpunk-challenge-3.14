using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using dotnet_cyberpunk_challenge_3.malware.lib;
using dotnet_cyberpunk_challenge_3.malware.lib._lib;

namespace dotnet_cyberpunk_challenge_3.malware
{
    public class MilitechKuangPrimusMalware : KuangDaemonFamilyBase
    {
        // TODO: Mentor note: Would be cool to test students on knowing/figuring out
        // that in order to override these methods successfully they need to add the
        // async keyword. It's not obvious because you can't put `async` on the 
        // abstract method since abstract methods don't have a body. So the abstract
        // class can't tell you "you need async on this"
        public async override Task Initialize()
        {
            await GetCurrentMilitechConnection();
        }

        public async override Task<string> GetIceTypeOnRemote()
        {
            MilitechMessageRoot militechMessageResponse = await CurrentMilitechServerConnection.SendRequest("model-type");
            string modelType = militechMessageResponse.connection.model;

            string matchedModel = "";
            if (_IsTargetHatichiICE(modelType)){
                matchedModel = "hatachi";
            } else if (_IsTargetHosakaICE(modelType)) {
                matchedModel ="hosaka";
            } else if (_IsTargetKiroshiICE(modelType)) {
                matchedModel = "kiroshi";
            } else {
                matchedModel = "unknown";
            }

            return matchedModel; 
        }

        public async override Task<List<MilitechICEProcessList>> GetMilitechProcessList()
        {
            MilitechMessageRoot message = await CurrentMilitechServerConnection.SendRequest("process-list");
            List<MilitechICEProcessList> processList = message.connection.processList;
            return processList;
        }

        public async override void IceBreak()
        {
            throw new NotImplementedException();
        }

        public async override Task SetupIceBreakerTunnelToTarget()
        {
            CurrentIceBreakerMilitechTunnelConnection = new IceBreakerMilitechTunnelConnection();
            await CurrentIceBreakerMilitechTunnelConnection.Initialize();
        }


        public async override Task<IEnumerable<string>> GetProcessMemoryMapping()
        {
            List<MilitechICEProcessList> arasakaMessageProcessLists = await GetMilitechProcessList();
            return arasakaMessageProcessLists.Select(pl => pl.memoryStartingAddress);
        }
    }
}